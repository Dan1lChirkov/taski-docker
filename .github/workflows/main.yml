name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest 
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
      # Передаём параметры для action appleboy/scp-action:
        with:
          host: "158.160.16.110"
          username: yc-user
          key: -----BEGIN OPENSSH PRIVATE KEY-----
            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
            -----END OPENSSH PRIVATE KEY-----            
          passphrase: JlOv3bJ-5z
          source: "docker-compose.production.yml"
          target: "taski"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: "158.160.16.110"
          username: yc-user
          key: -----BEGIN OPENSSH PRIVATE KEY-----
            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
            -----END OPENSSH PRIVATE KEY-----
          passphrase: JlOv3bJ-5z
          # Параметр script передаёт в action appleboy/ssh-action команды,
          # которые нужно выполнить на сервере, 
          # с которым установлено соединение
          script: |
            cd taski
            # Выполняет pull образов с Docker Hub
            sudo docker compose -f docker-compose.production.yml pull
            # Перезапускает все контейнеры в Docker Compose
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            # Выполняет миграции и сбор статики
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/